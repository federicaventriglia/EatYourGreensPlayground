//
// StrawberryView.swift
// Generated by Core Animator version 1.3.2 on 27/03/2017.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class StrawberryPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class StrawberryView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Init

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 375, height: 667))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Creating StrawberryView

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:375, height:667)
		__scaling__.center = CGPoint(x:187.5, y:333.5)
		__scaling__.layer.masksToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let strawberryLeg1__root = StrawberryPassthroughView()
		let strawberryLeg1__xScale = StrawberryPassthroughView()
		let strawberryLeg1__yScale = StrawberryPassthroughView()
		let strawberryLeg1 = UIImageView()
		let imgStrawberryLeg1 = UIImage(named:"StrawberryLeg1.png", in: bundle, compatibleWith: nil)
		if imgStrawberryLeg1 == nil {
			print("** Warning: Could not create image from 'StrawberryLeg1.png'")
		}
		strawberryLeg1.image = imgStrawberryLeg1
		strawberryLeg1.contentMode = .center
		strawberryLeg1.bounds = CGRect(x:0, y:0, width:90.0, height:186.0)
		strawberryLeg1__root.layer.position = CGPoint(x:151.066, y:424.253)
		strawberryLeg1__xScale.transform = CGAffineTransform(scaleX: 0.40, y: 1.00)
		strawberryLeg1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.40)
		strawberryLeg1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(strawberryLeg1__root)
		strawberryLeg1__root.addSubview(strawberryLeg1__xScale)
		strawberryLeg1__xScale.addSubview(strawberryLeg1__yScale)
		strawberryLeg1__yScale.addSubview(strawberryLeg1)
		__scaling__.addSubview(strawberryLeg1__root)
		viewsByName["StrawberryLeg1__root"] = strawberryLeg1__root
		viewsByName["StrawberryLeg1__xScale"] = strawberryLeg1__xScale
		viewsByName["StrawberryLeg1__yScale"] = strawberryLeg1__yScale
		viewsByName["StrawberryLeg1"] = strawberryLeg1

		let strawberryLeg12__root = StrawberryPassthroughView()
		let strawberryLeg12__xScale = StrawberryPassthroughView()
		let strawberryLeg12__yScale = StrawberryPassthroughView()
		let strawberryLeg12 = UIImageView()
		strawberryLeg12.image = imgStrawberryLeg1
		strawberryLeg12.contentMode = .center
		strawberryLeg12.bounds = CGRect(x:0, y:0, width:90.0, height:186.0)
		strawberryLeg12__root.layer.position = CGPoint(x:151.066, y:424.253)
		strawberryLeg12__xScale.transform = CGAffineTransform(scaleX: 0.40, y: 1.00)
		strawberryLeg12__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.40)
		strawberryLeg12__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(strawberryLeg12__root)
		strawberryLeg12__root.addSubview(strawberryLeg12__xScale)
		strawberryLeg12__xScale.addSubview(strawberryLeg12__yScale)
		strawberryLeg12__yScale.addSubview(strawberryLeg12)
		__scaling__.addSubview(strawberryLeg12__root)
		viewsByName["StrawberryLeg1-2__root"] = strawberryLeg12__root
		viewsByName["StrawberryLeg1-2__xScale"] = strawberryLeg12__xScale
		viewsByName["StrawberryLeg1-2__yScale"] = strawberryLeg12__yScale
		viewsByName["StrawberryLeg1-2"] = strawberryLeg12

		let strawberryLeg2__root = StrawberryPassthroughView()
		let strawberryLeg2__xScale = StrawberryPassthroughView()
		let strawberryLeg2__yScale = StrawberryPassthroughView()
		let strawberryLeg2 = UIImageView()
		let imgStrawberryLeg2 = UIImage(named:"StrawberryLeg2.png", in: bundle, compatibleWith: nil)
		if imgStrawberryLeg2 == nil {
			print("** Warning: Could not create image from 'StrawberryLeg2.png'")
		}
		strawberryLeg2.image = imgStrawberryLeg2
		strawberryLeg2.contentMode = .center
		strawberryLeg2.bounds = CGRect(x:0, y:0, width:96.0, height:192.0)
		strawberryLeg2__root.layer.position = CGPoint(x:206.700, y:432.562)
		strawberryLeg2__xScale.transform = CGAffineTransform(scaleX: 0.40, y: 1.00)
		strawberryLeg2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.40)
		strawberryLeg2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(strawberryLeg2__root)
		strawberryLeg2__root.addSubview(strawberryLeg2__xScale)
		strawberryLeg2__xScale.addSubview(strawberryLeg2__yScale)
		strawberryLeg2__yScale.addSubview(strawberryLeg2)
		__scaling__.addSubview(strawberryLeg2__root)
		viewsByName["StrawberryLeg2__root"] = strawberryLeg2__root
		viewsByName["StrawberryLeg2__xScale"] = strawberryLeg2__xScale
		viewsByName["StrawberryLeg2__yScale"] = strawberryLeg2__yScale
		viewsByName["StrawberryLeg2"] = strawberryLeg2

		let strawberryHead__root = StrawberryPassthroughView()
		let strawberryHead__xScale = StrawberryPassthroughView()
		let strawberryHead__yScale = StrawberryPassthroughView()
		let strawberryHead = UIImageView()
		let imgStrawberryHead = UIImage(named:"StrawberryHead.png", in: bundle, compatibleWith: nil)
		if imgStrawberryHead == nil {
			print("** Warning: Could not create image from 'StrawberryHead.png'")
		}
		strawberryHead.image = imgStrawberryHead
		strawberryHead.contentMode = .center
		strawberryHead.bounds = CGRect(x:0, y:0, width:540.0, height:300.0)
		strawberryHead__root.layer.position = CGPoint(x:181.272, y:222.045)
		strawberryHead__xScale.transform = CGAffineTransform(scaleX: 0.40, y: 1.00)
		strawberryHead__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.40)
		strawberryHead__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(strawberryHead__root)
		strawberryHead__root.addSubview(strawberryHead__xScale)
		strawberryHead__xScale.addSubview(strawberryHead__yScale)
		strawberryHead__yScale.addSubview(strawberryHead)
		__scaling__.addSubview(strawberryHead__root)
		viewsByName["StrawberryHead__root"] = strawberryHead__root
		viewsByName["StrawberryHead__xScale"] = strawberryHead__xScale
		viewsByName["StrawberryHead__yScale"] = strawberryHead__yScale
		viewsByName["StrawberryHead"] = strawberryHead

		let strawberryArm1__root = StrawberryPassthroughView()
		let strawberryArm1__xScale = StrawberryPassthroughView()
		let strawberryArm1__yScale = StrawberryPassthroughView()
		let strawberryArm1 = UIImageView()
		let imgStrawberryArm1 = UIImage(named:"StrawberryArm1.png", in: bundle, compatibleWith: nil)
		if imgStrawberryArm1 == nil {
			print("** Warning: Could not create image from 'StrawberryArm1.png'")
		}
		strawberryArm1.image = imgStrawberryArm1
		strawberryArm1.contentMode = .center
		strawberryArm1.bounds = CGRect(x:0, y:0, width:54.0, height:198.0)
		strawberryArm1__root.layer.position = CGPoint(x:118.272, y:355.472)
		strawberryArm1__xScale.transform = CGAffineTransform(scaleX: 0.40, y: 1.00)
		strawberryArm1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.40)
		strawberryArm1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(strawberryArm1__root)
		strawberryArm1__root.addSubview(strawberryArm1__xScale)
		strawberryArm1__xScale.addSubview(strawberryArm1__yScale)
		strawberryArm1__yScale.addSubview(strawberryArm1)
		__scaling__.addSubview(strawberryArm1__root)
		viewsByName["StrawberryArm1__root"] = strawberryArm1__root
		viewsByName["StrawberryArm1__xScale"] = strawberryArm1__xScale
		viewsByName["StrawberryArm1__yScale"] = strawberryArm1__yScale
		viewsByName["StrawberryArm1"] = strawberryArm1

		let strawberryBody__root = StrawberryPassthroughView()
		let strawberryBody__xScale = StrawberryPassthroughView()
		let strawberryBody__yScale = StrawberryPassthroughView()
		let strawberryBody = UIImageView()
		let imgStrawberryBody = UIImage(named:"StrawberryBody.png", in: bundle, compatibleWith: nil)
		if imgStrawberryBody == nil {
			print("** Warning: Could not create image from 'StrawberryBody.png'")
		}
		strawberryBody.image = imgStrawberryBody
		strawberryBody.contentMode = .center
		strawberryBody.bounds = CGRect(x:0, y:0, width:456.0, height:642.0)
		strawberryBody__root.layer.position = CGPoint(x:181.272, y:354.472)
		strawberryBody__xScale.transform = CGAffineTransform(scaleX: 0.40, y: 1.00)
		strawberryBody__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.40)
		strawberryBody__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(strawberryBody__root)
		strawberryBody__root.addSubview(strawberryBody__xScale)
		strawberryBody__xScale.addSubview(strawberryBody__yScale)
		strawberryBody__yScale.addSubview(strawberryBody)
		__scaling__.addSubview(strawberryBody__root)
		viewsByName["StrawberryBody__root"] = strawberryBody__root
		viewsByName["StrawberryBody__xScale"] = strawberryBody__xScale
		viewsByName["StrawberryBody__yScale"] = strawberryBody__yScale
		viewsByName["StrawberryBody"] = strawberryBody

		let strawberryArm12__root = StrawberryPassthroughView()
		let strawberryArm12__xScale = StrawberryPassthroughView()
		let strawberryArm12__yScale = StrawberryPassthroughView()
		let strawberryArm12 = UIImageView()
		strawberryArm12.image = imgStrawberryArm1
		strawberryArm12.contentMode = .center
		strawberryArm12.bounds = CGRect(x:0, y:0, width:54.0, height:198.0)
		strawberryArm12__root.layer.position = CGPoint(x:118.272, y:355.472)
		strawberryArm12__xScale.transform = CGAffineTransform(scaleX: 0.40, y: 1.00)
		strawberryArm12__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.40)
		strawberryArm12__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(strawberryArm12__root)
		strawberryArm12__root.addSubview(strawberryArm12__xScale)
		strawberryArm12__xScale.addSubview(strawberryArm12__yScale)
		strawberryArm12__yScale.addSubview(strawberryArm12)
		__scaling__.addSubview(strawberryArm12__root)
		viewsByName["StrawberryArm1-2__root"] = strawberryArm12__root
		viewsByName["StrawberryArm1-2__xScale"] = strawberryArm12__xScale
		viewsByName["StrawberryArm1-2__yScale"] = strawberryArm12__yScale
		viewsByName["StrawberryArm1-2"] = strawberryArm12

		let strawberryArm2__root = StrawberryPassthroughView()
		let strawberryArm2__xScale = StrawberryPassthroughView()
		let strawberryArm2__yScale = StrawberryPassthroughView()
		let strawberryArm2 = UIImageView()
		let imgStrawberryArm2 = UIImage(named:"StrawberryArm2.png", in: bundle, compatibleWith: nil)
		if imgStrawberryArm2 == nil {
			print("** Warning: Could not create image from 'StrawberryArm2.png'")
		}
		strawberryArm2.image = imgStrawberryArm2
		strawberryArm2.contentMode = .center
		strawberryArm2.bounds = CGRect(x:0, y:0, width:144.0, height:264.0)
		strawberryArm2__root.layer.position = CGPoint(x:288.828, y:294.890)
		strawberryArm2__xScale.transform = CGAffineTransform(scaleX: 0.40, y: 1.00)
		strawberryArm2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.40)
		strawberryArm2__root.transform = CGAffineTransform(rotationAngle: 0.636)
		__scaling__.addSubview(strawberryArm2__root)
		strawberryArm2__root.addSubview(strawberryArm2__xScale)
		strawberryArm2__xScale.addSubview(strawberryArm2__yScale)
		strawberryArm2__yScale.addSubview(strawberryArm2)
		__scaling__.addSubview(strawberryArm2__root)
		viewsByName["StrawberryArm2__root"] = strawberryArm2__root
		viewsByName["StrawberryArm2__xScale"] = strawberryArm2__xScale
		viewsByName["StrawberryArm2__yScale"] = strawberryArm2__yScale
		viewsByName["StrawberryArm2"] = strawberryArm2

		self.viewsByName = viewsByName
	}

	// - MARK: Animation Dance

	func addDanceAnimation() {
		addDanceAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addDanceAnimation(completion: ((Bool) -> Void)?) {
		addDanceAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addDanceAnimation(removedOnCompletion: Bool) {
		addDanceAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addDanceAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addDanceAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addDanceAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Dance")
			self.animationCompletions[layer.animation(forKey: "Dance")!] = complete
		}

		let strawberryHeadTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		strawberryHeadTranslationXAnimation.duration = 1.500
		strawberryHeadTranslationXAnimation.values = [0.000, -22.848, 0.000] as [Float]
		strawberryHeadTranslationXAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		strawberryHeadTranslationXAnimation.timingFunctions = [anticOverTiming, anticOverTiming]
		strawberryHeadTranslationXAnimation.repeatCount = HUGE
		strawberryHeadTranslationXAnimation.beginTime = beginTime
		strawberryHeadTranslationXAnimation.fillMode = fillMode
		strawberryHeadTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryHead__root"]?.layer.add(strawberryHeadTranslationXAnimation, forKey:"dance_TranslationX")

		let strawberryHeadTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		strawberryHeadTranslationYAnimation.duration = 1.500
		strawberryHeadTranslationYAnimation.values = [0.000, 0.969, 0.000] as [Float]
		strawberryHeadTranslationYAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		strawberryHeadTranslationYAnimation.timingFunctions = [anticOverTiming, anticOverTiming]
		strawberryHeadTranslationYAnimation.repeatCount = HUGE
		strawberryHeadTranslationYAnimation.beginTime = beginTime
		strawberryHeadTranslationYAnimation.fillMode = fillMode
		strawberryHeadTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryHead__root"]?.layer.add(strawberryHeadTranslationYAnimation, forKey:"dance_TranslationY")

		let strawberryLeg1RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		strawberryLeg1RotationAnimation.duration = 1.500
		strawberryLeg1RotationAnimation.values = [-0.202, -0.127, -0.127] as [Float]
		strawberryLeg1RotationAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		strawberryLeg1RotationAnimation.timingFunctions = [anticOverTiming, linearTiming]
		strawberryLeg1RotationAnimation.beginTime = beginTime
		strawberryLeg1RotationAnimation.fillMode = fillMode
		strawberryLeg1RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryLeg1__root"]?.layer.add(strawberryLeg1RotationAnimation, forKey:"dance_Rotation")

		let strawberryLeg1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		strawberryLeg1TranslationXAnimation.duration = 1.500
		strawberryLeg1TranslationXAnimation.values = [0.191, -21.793, 0.000] as [Float]
		strawberryLeg1TranslationXAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		strawberryLeg1TranslationXAnimation.timingFunctions = [anticOverTiming, anticOverTiming]
		strawberryLeg1TranslationXAnimation.repeatCount = HUGE
		strawberryLeg1TranslationXAnimation.beginTime = beginTime
		strawberryLeg1TranslationXAnimation.fillMode = fillMode
		strawberryLeg1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryLeg1__root"]?.layer.add(strawberryLeg1TranslationXAnimation, forKey:"dance_TranslationX")

		let strawberryLeg1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		strawberryLeg1TranslationYAnimation.duration = 1.500
		strawberryLeg1TranslationYAnimation.values = [0.000, 21.031, 0.000] as [Float]
		strawberryLeg1TranslationYAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		strawberryLeg1TranslationYAnimation.timingFunctions = [anticOverTiming, anticOverTiming]
		strawberryLeg1TranslationYAnimation.repeatCount = HUGE
		strawberryLeg1TranslationYAnimation.beginTime = beginTime
		strawberryLeg1TranslationYAnimation.fillMode = fillMode
		strawberryLeg1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryLeg1__root"]?.layer.add(strawberryLeg1TranslationYAnimation, forKey:"dance_TranslationY")

		let strawberryArm1RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		strawberryArm1RotationAnimation.duration = 1.500
		strawberryArm1RotationAnimation.values = [9.645, 9.645] as [Float]
		strawberryArm1RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		strawberryArm1RotationAnimation.timingFunctions = [linearTiming]
		strawberryArm1RotationAnimation.beginTime = beginTime
		strawberryArm1RotationAnimation.fillMode = fillMode
		strawberryArm1RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryArm1__root"]?.layer.add(strawberryArm1RotationAnimation, forKey:"dance_Rotation")

		let strawberryArm1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		strawberryArm1TranslationXAnimation.duration = 1.500
		strawberryArm1TranslationXAnimation.values = [2.562, -17.574, 2.000] as [Float]
		strawberryArm1TranslationXAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		strawberryArm1TranslationXAnimation.timingFunctions = [anticOverTiming, anticOverTiming]
		strawberryArm1TranslationXAnimation.repeatCount = HUGE
		strawberryArm1TranslationXAnimation.beginTime = beginTime
		strawberryArm1TranslationXAnimation.fillMode = fillMode
		strawberryArm1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryArm1__root"]?.layer.add(strawberryArm1TranslationXAnimation, forKey:"dance_TranslationX")

		let strawberryArm1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		strawberryArm1TranslationYAnimation.duration = 1.500
		strawberryArm1TranslationYAnimation.values = [21.926, 11.219, 21.000] as [Float]
		strawberryArm1TranslationYAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		strawberryArm1TranslationYAnimation.timingFunctions = [anticOverTiming, anticOverTiming]
		strawberryArm1TranslationYAnimation.repeatCount = HUGE
		strawberryArm1TranslationYAnimation.beginTime = beginTime
		strawberryArm1TranslationYAnimation.fillMode = fillMode
		strawberryArm1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryArm1__root"]?.layer.add(strawberryArm1TranslationYAnimation, forKey:"dance_TranslationY")

		let strawberryArm12RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		strawberryArm12RotationAnimation.duration = 1.500
		strawberryArm12RotationAnimation.values = [3.642, 3.642] as [Float]
		strawberryArm12RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		strawberryArm12RotationAnimation.timingFunctions = [linearTiming]
		strawberryArm12RotationAnimation.beginTime = beginTime
		strawberryArm12RotationAnimation.fillMode = fillMode
		strawberryArm12RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryArm1-2__root"]?.layer.add(strawberryArm12RotationAnimation, forKey:"dance_Rotation")

		let strawberryArm12TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		strawberryArm12TranslationXAnimation.duration = 1.500
		strawberryArm12TranslationXAnimation.values = [110.969, 63.660, 110.000] as [Float]
		strawberryArm12TranslationXAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		strawberryArm12TranslationXAnimation.timingFunctions = [anticOverTiming, anticOverTiming]
		strawberryArm12TranslationXAnimation.repeatCount = HUGE
		strawberryArm12TranslationXAnimation.beginTime = beginTime
		strawberryArm12TranslationXAnimation.fillMode = fillMode
		strawberryArm12TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryArm1-2__root"]?.layer.add(strawberryArm12TranslationXAnimation, forKey:"dance_TranslationX")

		let strawberryArm12TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		strawberryArm12TranslationYAnimation.duration = 1.500
		strawberryArm12TranslationYAnimation.values = [6.082, 36.816, 6.000] as [Float]
		strawberryArm12TranslationYAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		strawberryArm12TranslationYAnimation.timingFunctions = [anticOverTiming, anticOverTiming]
		strawberryArm12TranslationYAnimation.repeatCount = HUGE
		strawberryArm12TranslationYAnimation.beginTime = beginTime
		strawberryArm12TranslationYAnimation.fillMode = fillMode
		strawberryArm12TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryArm1-2__root"]?.layer.add(strawberryArm12TranslationYAnimation, forKey:"dance_TranslationY")

		let strawberryLeg2OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		strawberryLeg2OpacityAnimation.duration = 1.500
		strawberryLeg2OpacityAnimation.values = [0.000, 0.000] as [Float]
		strawberryLeg2OpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		strawberryLeg2OpacityAnimation.timingFunctions = [linearTiming]
		strawberryLeg2OpacityAnimation.beginTime = beginTime
		strawberryLeg2OpacityAnimation.fillMode = fillMode
		strawberryLeg2OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryLeg2__root"]?.layer.add(strawberryLeg2OpacityAnimation, forKey:"dance_Opacity")

		let strawberryBodyTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		strawberryBodyTranslationXAnimation.duration = 1.500
		strawberryBodyTranslationXAnimation.values = [0.000, -26.766, 0.000] as [Float]
		strawberryBodyTranslationXAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		strawberryBodyTranslationXAnimation.timingFunctions = [anticOverTiming, anticOverTiming]
		strawberryBodyTranslationXAnimation.repeatCount = HUGE
		strawberryBodyTranslationXAnimation.beginTime = beginTime
		strawberryBodyTranslationXAnimation.fillMode = fillMode
		strawberryBodyTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryBody__root"]?.layer.add(strawberryBodyTranslationXAnimation, forKey:"dance_TranslationX")

		let strawberryBodyTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		strawberryBodyTranslationYAnimation.duration = 1.500
		strawberryBodyTranslationYAnimation.values = [0.000, 10.852, 0.000] as [Float]
		strawberryBodyTranslationYAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		strawberryBodyTranslationYAnimation.timingFunctions = [anticOverTiming, anticOverTiming]
		strawberryBodyTranslationYAnimation.repeatCount = HUGE
		strawberryBodyTranslationYAnimation.beginTime = beginTime
		strawberryBodyTranslationYAnimation.fillMode = fillMode
		strawberryBodyTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryBody__root"]?.layer.add(strawberryBodyTranslationYAnimation, forKey:"dance_TranslationY")

		let strawberryLeg12RotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		strawberryLeg12RotationAnimation.duration = 1.500
		strawberryLeg12RotationAnimation.values = [-0.202, -0.202] as [Float]
		strawberryLeg12RotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		strawberryLeg12RotationAnimation.timingFunctions = [linearTiming]
		strawberryLeg12RotationAnimation.beginTime = beginTime
		strawberryLeg12RotationAnimation.fillMode = fillMode
		strawberryLeg12RotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryLeg1-2__root"]?.layer.add(strawberryLeg12RotationAnimation, forKey:"dance_Rotation")

		let strawberryLeg12TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		strawberryLeg12TranslationXAnimation.duration = 1.500
		strawberryLeg12TranslationXAnimation.values = [48.996, 20.605, 48.000] as [Float]
		strawberryLeg12TranslationXAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		strawberryLeg12TranslationXAnimation.timingFunctions = [anticOverTiming, anticOverTiming]
		strawberryLeg12TranslationXAnimation.repeatCount = HUGE
		strawberryLeg12TranslationXAnimation.beginTime = beginTime
		strawberryLeg12TranslationXAnimation.fillMode = fillMode
		strawberryLeg12TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryLeg1-2__root"]?.layer.add(strawberryLeg12TranslationXAnimation, forKey:"dance_TranslationX")

		let strawberryLeg12TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		strawberryLeg12TranslationYAnimation.duration = 1.500
		strawberryLeg12TranslationYAnimation.values = [12.598, 22.199, 12.000] as [Float]
		strawberryLeg12TranslationYAnimation.keyTimes = [0.000, 0.500, 1.000] as [NSNumber]
		strawberryLeg12TranslationYAnimation.timingFunctions = [anticOverTiming, anticOverTiming]
		strawberryLeg12TranslationYAnimation.repeatCount = HUGE
		strawberryLeg12TranslationYAnimation.beginTime = beginTime
		strawberryLeg12TranslationYAnimation.fillMode = fillMode
		strawberryLeg12TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryLeg1-2__root"]?.layer.add(strawberryLeg12TranslationYAnimation, forKey:"dance_TranslationY")

		let strawberryArm2OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		strawberryArm2OpacityAnimation.duration = 1.500
		strawberryArm2OpacityAnimation.values = [0.000, 0.000] as [Float]
		strawberryArm2OpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		strawberryArm2OpacityAnimation.timingFunctions = [linearTiming]
		strawberryArm2OpacityAnimation.beginTime = beginTime
		strawberryArm2OpacityAnimation.fillMode = fillMode
		strawberryArm2OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryArm2__root"]?.layer.add(strawberryArm2OpacityAnimation, forKey:"dance_Opacity")
	}

	func removeDanceAnimation() {
		self.layer.removeAnimation(forKey: "Dance")
		self.viewsByName["StrawberryHead__root"]?.layer.removeAnimation(forKey: "dance_TranslationX")
		self.viewsByName["StrawberryHead__root"]?.layer.removeAnimation(forKey: "dance_TranslationY")
		self.viewsByName["StrawberryLeg1__root"]?.layer.removeAnimation(forKey: "dance_Rotation")
		self.viewsByName["StrawberryLeg1__root"]?.layer.removeAnimation(forKey: "dance_TranslationX")
		self.viewsByName["StrawberryLeg1__root"]?.layer.removeAnimation(forKey: "dance_TranslationY")
		self.viewsByName["StrawberryArm1__root"]?.layer.removeAnimation(forKey: "dance_Rotation")
		self.viewsByName["StrawberryArm1__root"]?.layer.removeAnimation(forKey: "dance_TranslationX")
		self.viewsByName["StrawberryArm1__root"]?.layer.removeAnimation(forKey: "dance_TranslationY")
		self.viewsByName["StrawberryArm1-2__root"]?.layer.removeAnimation(forKey: "dance_Rotation")
		self.viewsByName["StrawberryArm1-2__root"]?.layer.removeAnimation(forKey: "dance_TranslationX")
		self.viewsByName["StrawberryArm1-2__root"]?.layer.removeAnimation(forKey: "dance_TranslationY")
		self.viewsByName["StrawberryLeg2__root"]?.layer.removeAnimation(forKey: "dance_Opacity")
		self.viewsByName["StrawberryBody__root"]?.layer.removeAnimation(forKey: "dance_TranslationX")
		self.viewsByName["StrawberryBody__root"]?.layer.removeAnimation(forKey: "dance_TranslationY")
		self.viewsByName["StrawberryLeg1-2__root"]?.layer.removeAnimation(forKey: "dance_Rotation")
		self.viewsByName["StrawberryLeg1-2__root"]?.layer.removeAnimation(forKey: "dance_TranslationX")
		self.viewsByName["StrawberryLeg1-2__root"]?.layer.removeAnimation(forKey: "dance_TranslationY")
		self.viewsByName["StrawberryArm2__root"]?.layer.removeAnimation(forKey: "dance_Opacity")
	}

	// - MARK: Animation Walk

	func addWalkAnimation() {
		addWalkAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addWalkAnimation(completion: ((Bool) -> Void)?) {
		addWalkAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addWalkAnimation(removedOnCompletion: Bool) {
		addWalkAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addWalkAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addWalkAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addWalkAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Walk")
			self.animationCompletions[layer.animation(forKey: "Walk")!] = complete
		}

		let strawberryHeadTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		strawberryHeadTranslationXAnimation.duration = 1.500
		strawberryHeadTranslationXAnimation.values = [0.000, -29.336, 3.578, 0.000] as [Float]
		strawberryHeadTranslationXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		strawberryHeadTranslationXAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming]
		strawberryHeadTranslationXAnimation.repeatCount = HUGE
		strawberryHeadTranslationXAnimation.beginTime = beginTime
		strawberryHeadTranslationXAnimation.fillMode = fillMode
		strawberryHeadTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryHead__root"]?.layer.add(strawberryHeadTranslationXAnimation, forKey:"walk_TranslationX")

		let strawberryHeadTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		strawberryHeadTranslationYAnimation.duration = 1.500
		strawberryHeadTranslationYAnimation.values = [0.000, -2.605, 8.781, 0.000] as [Float]
		strawberryHeadTranslationYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		strawberryHeadTranslationYAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming]
		strawberryHeadTranslationYAnimation.repeatCount = HUGE
		strawberryHeadTranslationYAnimation.beginTime = beginTime
		strawberryHeadTranslationYAnimation.fillMode = fillMode
		strawberryHeadTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryHead__root"]?.layer.add(strawberryHeadTranslationYAnimation, forKey:"walk_TranslationY")

		let strawberryLeg1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		strawberryLeg1TranslationXAnimation.duration = 1.500
		strawberryLeg1TranslationXAnimation.values = [0.000, -14.656, -11.613, 0.000] as [Float]
		strawberryLeg1TranslationXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		strawberryLeg1TranslationXAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming]
		strawberryLeg1TranslationXAnimation.repeatCount = HUGE
		strawberryLeg1TranslationXAnimation.beginTime = beginTime
		strawberryLeg1TranslationXAnimation.fillMode = fillMode
		strawberryLeg1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryLeg1__root"]?.layer.add(strawberryLeg1TranslationXAnimation, forKey:"walk_TranslationX")

		let strawberryLeg1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		strawberryLeg1TranslationYAnimation.duration = 1.500
		strawberryLeg1TranslationYAnimation.values = [0.000, 14.375, 0.723, 0.000] as [Float]
		strawberryLeg1TranslationYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		strawberryLeg1TranslationYAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming]
		strawberryLeg1TranslationYAnimation.repeatCount = HUGE
		strawberryLeg1TranslationYAnimation.beginTime = beginTime
		strawberryLeg1TranslationYAnimation.fillMode = fillMode
		strawberryLeg1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryLeg1__root"]?.layer.add(strawberryLeg1TranslationYAnimation, forKey:"walk_TranslationY")

		let strawberryArm1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		strawberryArm1TranslationXAnimation.duration = 1.500
		strawberryArm1TranslationXAnimation.values = [0.000, -18.664, -3.109, 0.000] as [Float]
		strawberryArm1TranslationXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		strawberryArm1TranslationXAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming]
		strawberryArm1TranslationXAnimation.repeatCount = HUGE
		strawberryArm1TranslationXAnimation.beginTime = beginTime
		strawberryArm1TranslationXAnimation.fillMode = fillMode
		strawberryArm1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryArm1__root"]?.layer.add(strawberryArm1TranslationXAnimation, forKey:"walk_TranslationX")

		let strawberryArm1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		strawberryArm1TranslationYAnimation.duration = 1.500
		strawberryArm1TranslationYAnimation.values = [0.000, 16.469, 16.727, 0.000] as [Float]
		strawberryArm1TranslationYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		strawberryArm1TranslationYAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming]
		strawberryArm1TranslationYAnimation.repeatCount = HUGE
		strawberryArm1TranslationYAnimation.beginTime = beginTime
		strawberryArm1TranslationYAnimation.fillMode = fillMode
		strawberryArm1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryArm1__root"]?.layer.add(strawberryArm1TranslationYAnimation, forKey:"walk_TranslationY")

		let strawberryArm12OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		strawberryArm12OpacityAnimation.duration = 1.500
		strawberryArm12OpacityAnimation.values = [0.000, 0.000] as [Float]
		strawberryArm12OpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		strawberryArm12OpacityAnimation.timingFunctions = [linearTiming]
		strawberryArm12OpacityAnimation.beginTime = beginTime
		strawberryArm12OpacityAnimation.fillMode = fillMode
		strawberryArm12OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryArm1-2__root"]?.layer.add(strawberryArm12OpacityAnimation, forKey:"walk_Opacity")

		let strawberryLeg2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		strawberryLeg2TranslationXAnimation.duration = 1.500
		strawberryLeg2TranslationXAnimation.values = [0.000, -3.047, -3.484, 0.000] as [Float]
		strawberryLeg2TranslationXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		strawberryLeg2TranslationXAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming]
		strawberryLeg2TranslationXAnimation.repeatCount = HUGE
		strawberryLeg2TranslationXAnimation.beginTime = beginTime
		strawberryLeg2TranslationXAnimation.fillMode = fillMode
		strawberryLeg2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryLeg2__root"]?.layer.add(strawberryLeg2TranslationXAnimation, forKey:"walk_TranslationX")

		let strawberryLeg2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		strawberryLeg2TranslationYAnimation.duration = 1.500
		strawberryLeg2TranslationYAnimation.values = [0.000, -12.777, 16.980, 0.000] as [Float]
		strawberryLeg2TranslationYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		strawberryLeg2TranslationYAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming]
		strawberryLeg2TranslationYAnimation.repeatCount = HUGE
		strawberryLeg2TranslationYAnimation.beginTime = beginTime
		strawberryLeg2TranslationYAnimation.fillMode = fillMode
		strawberryLeg2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryLeg2__root"]?.layer.add(strawberryLeg2TranslationYAnimation, forKey:"walk_TranslationY")

		let strawberryBodyTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		strawberryBodyTranslationXAnimation.duration = 1.500
		strawberryBodyTranslationXAnimation.values = [0.000, -21.332, -3.430, 0.000] as [Float]
		strawberryBodyTranslationXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		strawberryBodyTranslationXAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming]
		strawberryBodyTranslationXAnimation.repeatCount = HUGE
		strawberryBodyTranslationXAnimation.beginTime = beginTime
		strawberryBodyTranslationXAnimation.fillMode = fillMode
		strawberryBodyTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryBody__root"]?.layer.add(strawberryBodyTranslationXAnimation, forKey:"walk_TranslationX")

		let strawberryBodyTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		strawberryBodyTranslationYAnimation.duration = 1.500
		strawberryBodyTranslationYAnimation.values = [0.000, 1.637, 10.426, 0.000] as [Float]
		strawberryBodyTranslationYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		strawberryBodyTranslationYAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming]
		strawberryBodyTranslationYAnimation.repeatCount = HUGE
		strawberryBodyTranslationYAnimation.beginTime = beginTime
		strawberryBodyTranslationYAnimation.fillMode = fillMode
		strawberryBodyTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryBody__root"]?.layer.add(strawberryBodyTranslationYAnimation, forKey:"walk_TranslationY")

		let strawberryLeg12OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		strawberryLeg12OpacityAnimation.duration = 1.500
		strawberryLeg12OpacityAnimation.values = [0.000, 0.000] as [Float]
		strawberryLeg12OpacityAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		strawberryLeg12OpacityAnimation.timingFunctions = [linearTiming]
		strawberryLeg12OpacityAnimation.beginTime = beginTime
		strawberryLeg12OpacityAnimation.fillMode = fillMode
		strawberryLeg12OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryLeg1-2__root"]?.layer.add(strawberryLeg12OpacityAnimation, forKey:"walk_Opacity")

		let strawberryArm2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		strawberryArm2TranslationXAnimation.duration = 1.500
		strawberryArm2TranslationXAnimation.values = [0.000, -23.078, 2.746, 0.000] as [Float]
		strawberryArm2TranslationXAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		strawberryArm2TranslationXAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming]
		strawberryArm2TranslationXAnimation.repeatCount = HUGE
		strawberryArm2TranslationXAnimation.beginTime = beginTime
		strawberryArm2TranslationXAnimation.fillMode = fillMode
		strawberryArm2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryArm2__root"]?.layer.add(strawberryArm2TranslationXAnimation, forKey:"walk_TranslationX")

		let strawberryArm2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		strawberryArm2TranslationYAnimation.duration = 1.500
		strawberryArm2TranslationYAnimation.values = [0.000, -6.562, 12.902, 0.000] as [Float]
		strawberryArm2TranslationYAnimation.keyTimes = [0.000, 0.333, 0.667, 1.000] as [NSNumber]
		strawberryArm2TranslationYAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming]
		strawberryArm2TranslationYAnimation.repeatCount = HUGE
		strawberryArm2TranslationYAnimation.beginTime = beginTime
		strawberryArm2TranslationYAnimation.fillMode = fillMode
		strawberryArm2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["StrawberryArm2__root"]?.layer.add(strawberryArm2TranslationYAnimation, forKey:"walk_TranslationY")
	}

	func removeWalkAnimation() {
		self.layer.removeAnimation(forKey: "Walk")
		self.viewsByName["StrawberryHead__root"]?.layer.removeAnimation(forKey: "walk_TranslationX")
		self.viewsByName["StrawberryHead__root"]?.layer.removeAnimation(forKey: "walk_TranslationY")
		self.viewsByName["StrawberryLeg1__root"]?.layer.removeAnimation(forKey: "walk_TranslationX")
		self.viewsByName["StrawberryLeg1__root"]?.layer.removeAnimation(forKey: "walk_TranslationY")
		self.viewsByName["StrawberryArm1__root"]?.layer.removeAnimation(forKey: "walk_TranslationX")
		self.viewsByName["StrawberryArm1__root"]?.layer.removeAnimation(forKey: "walk_TranslationY")
		self.viewsByName["StrawberryArm1-2__root"]?.layer.removeAnimation(forKey: "walk_Opacity")
		self.viewsByName["StrawberryLeg2__root"]?.layer.removeAnimation(forKey: "walk_TranslationX")
		self.viewsByName["StrawberryLeg2__root"]?.layer.removeAnimation(forKey: "walk_TranslationY")
		self.viewsByName["StrawberryBody__root"]?.layer.removeAnimation(forKey: "walk_TranslationX")
		self.viewsByName["StrawberryBody__root"]?.layer.removeAnimation(forKey: "walk_TranslationY")
		self.viewsByName["StrawberryLeg1-2__root"]?.layer.removeAnimation(forKey: "walk_Opacity")
		self.viewsByName["StrawberryArm2__root"]?.layer.removeAnimation(forKey: "walk_TranslationX")
		self.viewsByName["StrawberryArm2__root"]?.layer.removeAnimation(forKey: "walk_TranslationY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "Dance")
		self.layer.removeAnimation(forKey: "Walk")
	}
}
